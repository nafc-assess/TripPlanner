unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-47" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-47" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
unique_trips
unique_trips
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-46" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-45" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-44" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-77-37" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
library(TSP)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(Rstrap)
## Random selection of a trip --------------------------------------------------
all_sets <- setdet[setdet$rec == 5, ]
all_sets$trip_id <- with(all_sets, paste0(survey.year, "-", vessel, "-", trip))
all_sets <- all_sets[!duplicated(paste0(all_sets$trip_id, "-", all_sets$set)), ]
unique_trips <- unique(all_sets$trip_id)
time <- all_sets$time.mid
all_sets$hour <- as.numeric(substr(time, 1, nchar(time) - 2))
all_sets$minute <- as.numeric(substr(time, nchar(time) - 1, nchar(time)))
all_sets$date <- with(all_sets, ISOdate(year, month, day, hour, minute))
all_sets$long.start <- -all_sets$long.start
one_trip <- "2023-76-33" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
for (t in tail(unique_trips, 50)) {
one_trip <- t # "2023-76-33" # sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == one_trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
## Extract coordinates and solve TSP -------------------------------------------
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
## Map paths -------------------------------------------------------------------
world_map <- ne_coastline(scale = "large", returnclass = "sf")
bbox <- c(xmin = -75, xmax = -30, ymin = 30, ymax = 65) # NL bbox
nl_map <- st_crop(world_map, bbox) |>
st_transform(crs = 32622)
plot(coords_utm, type = "o", pch = 16, main = one_trip)
plot(st_geometry(nl_map), add = TRUE, col = "lightgrey")
plot(st_geometry(ne_countries(country = "canada")), add = TRUE)
with(tsp_path, lines(X, Y, col = "red"))
legend("topright", lty = c(1, 1), col = c("black", "red"),
legend = c(paste0("Actual (", round(actual_tot_dist / 1000), " km)"),
paste0("TSP (", round(tsp_tot_dist / 1000), " km)")))
box()
}
comp_dist <- function(trip) {
one_trip <- sample(unique_trips, 1)
sets <- all_sets[all_sets$trip_id == trip, ]
sets <- sets[order(sets$date), ] # make sure to sort by date to re-construct path
coords <- data.frame(lon = sets$long.start, lat = sets$lat.start)
coords_sf <- st_as_sf(coords, coords = c("lon", "lat"), crs = 4326)
coords_utm <- st_transform(coords_sf, crs = 32622)
actual_path <- data.frame(st_coordinates(coords_utm))
dist_mat <- as.matrix(dist(actual_path))
tsp <- TSP(dist_mat)
actual_solution <- solve_TSP(tsp, method = "identity")
tsp_solution <- solve_TSP(tsp)
tsp_order <- as.integer(tsp_solution)
tsp_path <- actual_path[tsp_order, ]
actual_tot_dist <- attr(actual_solution, "tour_length")
tsp_tot_dist <- attr(tsp_solution, "tour_length")
data.frame(actual = actual_tot_dist, tsp = tsp_tot_dist)
}
dists <- lapply(unique_trips, comp_dist)
dists <- do.call(rbind, dists)
hist((dists$actual - dists$tsp) / 1000, breaks = 50, xlab = "Difference in distance traveled (km)",
main = "Potential reduction in travel distance using a TSP algorithim")
box()
# Function to generate 20 random locations on Grand Bank of Newfoundland
generate_random_locations <- function(n = 20) {
set.seed(123)
# Approximate latitude and longitude boundaries of Grand Bank
lat_range <- c(43.5, 46)
lon_range <- c(-52, -49)
# Generate random latitudes and longitudes within bounds
data.frame(
`set number` = 1:n,
latitude = runif(n, min = lat_range[1], max = lat_range[2]),
longitude = runif(n, min = lon_range[1], max = lon_range[2])
)
}
# Function to read CSV or generate random data
get_locations <- function(file) {
if (is.null(file)) {
generate_random_locations()
} else {
read.csv(file$datapath)
}
}
file <- NULL
get_locations(file)
?labelOptions
?labelOptions
??labelOptions
?leaflet::addLabelOnlyMarkers
?leaflet::addCircleMarkers
?datatable
?DT::datatable
?DT::formatRound
datatable(tsp_solution[, c("set", "latitude", "longitude", "distance")],
colnames = c("Set", "Latitude", "Longitude", "Distance (km)"),
editable = "row") |>
formatRound(columns = c("latitude", "longitude", "distance"), digits = 3)
renderDT({
locs <- get_locations(input$file)
locs_utm <- convert_to_utm(locs)
tsp_solution <- solve_tsp(locs_utm)
# Calculate distances between consecutive points
tsp_solution$distance <- c(NA, round(sqrt(rowSums(diff(as.matrix(tsp_solution[, c("X", "Y")]))^2)), 2)) / 1000
datatable(tsp_solution[, c("set", "latitude", "longitude", "distance")],
colnames = c("Set", "Latitude", "Longitude", "Distance (km)"),
editable = "row") |>
formatRound(columns = c("latitude", "longitude", "distance"), digits = 3)
})
datatable(tsp_solution[, c("set", "latitude", "longitude", "distance")],
colnames = c("Set", "Latitude", "Longitude", "Distance (km)"),
editable = "row") |>
formatRound(columns = c("latitude", "longitude", "distance"), digits = 3)
datatable(tsp_solution[, c("set", "latitude", "longitude", "distance")],
options = list(pageLength = 100),
colnames = c("Set", "Latitude", "Longitude", "Distance (km)"),
rownames = FALSE,
editable = "cell") |>
formatRound(columns = c("latitude", "longitude", "distance"), digits = 3)
?selectInput
?textInput
?selectInput
?DT::datatable
# Function to generate 20 random locations on Grand Bank of Newfoundland
generate_random_locations <- function(n = 20) {
set.seed(123)
# Approximate latitude and longitude boundaries of Grand Bank
lat_range <- c(43.5, 46)
lon_range <- c(-52, -49)
# Generate random latitudes and longitudes within bounds
data.frame(
set = 1:n,
latitude = runif(n, min = lat_range[1], max = lat_range[2]),
longitude = runif(n, min = lon_range[1], max = lon_range[2])
)
}
data <- generate_random_locations()
dist_matrix <- dist(data[, c("X", "Y")])
tsp <- TSP(dist_matrix)
library(TSP)
# Required Libraries
library(shiny)
library(leaflet)
library(sf)
library(TSP)
library(DT)
# Function to generate 20 random locations on Grand Bank of Newfoundland
generate_random_locations <- function(n = 20) {
set.seed(123)
# Approximate latitude and longitude boundaries of Grand Bank
lat_range <- c(43.5, 46)
lon_range <- c(-52, -49)
# Generate random latitudes and longitudes within bounds
data.frame(
set = 1:n,
latitude = runif(n, min = lat_range[1], max = lat_range[2]),
longitude = runif(n, min = lon_range[1], max = lon_range[2])
)
}
# Function to read CSV or generate random data
get_locations <- function(file) {
if (is.null(file)) {
generate_random_locations()
} else {
read.csv(file$datapath)
}
}
# Function to convert lat/lon to UTM using sf
convert_to_utm <- function(data) {
coordinates <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
utm_coords <- st_transform(coordinates, crs = 32621) # UTM Zone 21N for Newfoundland
utm_coords_df <- as.data.frame(st_coordinates(utm_coords))
return(cbind(data, utm_coords_df))
}
# Function to solve TSP
solve_tsp <- function(data) {
dist_matrix <- dist(data[, c("X", "Y")])
tsp <- TSP(dist_matrix)
solution <- solve_TSP(tsp)
data[solution, ]
}
locs_utm <- convert_to_utm(locs)  # Convert to UTM
locs <- generate_random_locations()
locs
locs_utm <- convert_to_utm(locs)  # Convert to UTM
tsp_solution <- solve_tsp(locs_utm)  # Solve TSP for optimal path
tsp_solution
leaflet(tsp_solution) %>%
addTiles() %>%
# Add markers with labels for set numbers
addCircleMarkers(
lng = ~longitude, lat = ~latitude,
radius = 2, color = "white", opacity = 1,
) %>%
# Add set number directly on the map
addLabelOnlyMarkers(
lng = ~longitude, lat = ~latitude,
label = ~as.character(set),
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE,
style = list("color" = "white"))
)
leaflet(tsp_solution) %>%
addTiles() %>%
# Add markers with labels for set numbers
addCircleMarkers(
lng = ~longitude, lat = ~latitude,
radius = 2, color = "white", opacity = 1,
) %>%
# Add set number directly on the map
addLabelOnlyMarkers(
lng = ~longitude, lat = ~latitude,
label = ~as.character(set),
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE,
style = list("color" = "white"))
) %>%
# Add polyline connecting the dots (optimal path)
addPolylines(
lng = ~longitude, lat = ~latitude,
color = "white", weight = 2, opacity = 0.8
)
?addPolylines
tsp_solution
locs_utm <- convert_to_utm(locs)
tsp_solution <- solve_tsp(locs_utm)
tsp_solution
tsp_solution <- solve_tsp(locs_utm)
tsp_solution
?solve_TSP
?selectInput
?verbatimTextOutput
?sum
locs
write.csv(locs, "temp.csv", row.names = FALSE)
